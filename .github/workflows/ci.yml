name: CI

on:
#  push:
#    branches:
#      - 'main'
#    tags:
#      - 'v*'
  pull_request:
    branches:
      - 'main'
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      POETRY_VIRTUALENVS_IN_PROJECT: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache

      - name: Install Poetry if not cached
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Install poetry-dynamic-versioning
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        run: poetry self add "poetry-dynamic-versioning[plugin]"

      - name: Load cached venv
        id: cached-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ steps.setup-python.outputs.python-version }}-
            venv-
      - name: Install dependencies
        # if: steps.cached-venv.outputs.cache-hit != 'true'
        run: poetry install --sync

      - name: Run mypy
        run: poetry run mypy

      - name: Run tests
        run: poetry run pytest

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

      - name: Build package
        run: poetry build

      - name: 'Upload Build'
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
          retention-days: 3
